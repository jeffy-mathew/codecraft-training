// Code generated by MockGen. DO NOT EDIT.
// Source: competitor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompetitor is a mock of Competitor interface.
type MockCompetitor struct {
	ctrl     *gomock.Controller
	recorder *MockCompetitorMockRecorder
}

// MockCompetitorMockRecorder is the mock recorder for MockCompetitor.
type MockCompetitorMockRecorder struct {
	mock *MockCompetitor
}

// NewMockCompetitor creates a new mock instance.
func NewMockCompetitor(ctrl *gomock.Controller) *MockCompetitor {
	mock := &MockCompetitor{ctrl: ctrl}
	mock.recorder = &MockCompetitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompetitor) EXPECT() *MockCompetitorMockRecorder {
	return m.recorder
}

// Price mocks base method.
func (m *MockCompetitor) Price(title string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Price", title)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Price indicates an expected call of Price.
func (mr *MockCompetitorMockRecorder) Price(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Price", reflect.TypeOf((*MockCompetitor)(nil).Price), title)
}
